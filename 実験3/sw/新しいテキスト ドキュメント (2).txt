%{
open Syntax
%}

%token LPAREN RPAREN SEMISEMI
%token PLUS MULT LT SEKI WA
%token IF THEN ELSE TRUE FALSE
%token LET IN EQ
%token RARROW FUN REC

%token <int> INTV
%token <Syntax.id> ID

%start toplevel
%type <Syntax.program> toplevel
%%

toplevel :
  e=Expr SEMISEMI { Exp e }
| LET x=ID EQ e=Expr SEMISEMI { Decl (x, e) }
| LET REC x=ID EQ FUN y=ID RARROW e=Expr SEMISEMI { RecDecl (x, y, e) }


Expr :
  e=IfExpr { e }
| e=LetExpr { e }
| e=WExpr { e }
| e=FunExpr { e }
| e=LetRecExpr { e }
| e=LTExpr { e }


SExpr :
    l=LTExpr SEKI r=LTExpr { BinOp (Seki, l, r) }
 
    
WExpr :
    l=Expr WA r=Expr { BinOp (Wa, l, r) }
 
    
LTExpr :
    l=PExpr LT r=PExpr { BinOp (Lt, l, r) }
  | e=PExpr { e }
  | e=SExpr { e }

PExpr :
    l=PExpr PLUS r=MExpr { BinOp (Plus, l, r) }
  | e=MExpr { e }

MExpr :
    l=MExpr MULT r=AppExpr { BinOp (Mult, l, r) }
  | e=AppExpr { e }

AExpr :
    i=INTV { ILit i }
  | TRUE   { BLit true }
  | FALSE  { BLit false }
  | i=ID   { Var i }
  | LPAREN e=Expr RPAREN { e }

IfExpr :
     IF c=Expr THEN t=Expr ELSE e=Expr { IfExp (c, t, e) }

LetExpr :
     LET x=ID EQ e1=Expr IN e2=Expr { LetExp (x, e1, e2) }

AppExpr :
    e1=AppExpr e2=AExpr { AppExp (e1, e2) }
  | e=AExpr { e }

FunExpr : 
     FUN x=ID RARROW e=Expr { FunExp(x, e) }

LetRecExpr : 
   LET REC x=ID EQ FUN y=ID RARROW e1=Expr IN e2=Expr { LetRecExp (x, y, e1, e2) }